//###############################################################################
//# WbXbc - Wishbone Initiator Monitor Assertions (Pipelined)                   #
//###############################################################################
//#    Copyright 2018 Dirk Heisswolf                                            #
//#    This file is part of the WbXbc project.                                  #
//#                                                                             #
//#    WbXbc is free software: you can redistribute it and/or modify            #
//#    it under the terms of the GNU General Public License as published by     #
//#    the Free Software Foundation, either version 3 of the License, or        #
//#    (at your option) any later version.                                      #
//#                                                                             #
//#    WbXbc is distributed in the hope that it will be useful,                 #
//#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#    GNU General Public License for more details.                             #
//#                                                                             #
//#    You should have received a copy of the GNU General Public License        #
//#    along with WbXbc.  If not, see <http://www.gnu.org/licenses/>.           #
//###############################################################################
//# Description:                                                                #
//#    This set of assertion monitors a pipelined Wishbone initiator for        #
//#    protocol violations.                                                     #
//#                                                                             #
//###############################################################################
//# Version History:                                                            #
//#   October 9, 2018                                                           #
//#      - Initial release                                                      #
//###############################################################################
`default_nettype none

module wb_itr_mon
  #(parameter ADR_WIDTH   = 16,  //width of the address bus
    parameter DAT_WIDTH   = 16,  //width of each data bus
    parameter SEL_WIDTH   = 2,   //number of data select lines
    parameter TGA_WIDTH   = 1,   //number of address tags
    parameter TGC_WIDTH   = 1,   //number of cycle tags
    parameter TGRD_WIDTH  = 1,   //number of read data tags
    parameter TGWD_WIDTH  = 1)   //number of write data tags

   (//Clock and reset
    //---------------
    input wire                             clk_i,            //module clock
    input wire                             async_rst_i,      //asynchronous reset
    input wire                             sync_rst_i,       //synchronous reset

    //Initiator interface
    //-------------------
    input  wire                            itr_cyc_i,        //bus cycle indicator       +-
    input  wire                            itr_stb_i,        //access request            |
    input  wire                            itr_we_i,         //write enable              |
    input  wire                            itr_lock_i,       //uninterruptable bus cycle | initiator
    input  wire [SEL_WIDTH-1:0]            itr_sel_i,        //write data selects        | initiator
    input  wire [ADR_WIDTH-1:0]            itr_adr_i,        //address bus               | to
    input  wire [DAT_WIDTH-1:0]            itr_dat_i,        //write data bus            | target
    input  wire [TGA_WIDTH-1:0]            itr_tga_i,        //address tags              |
    input  wire [TGC_WIDTH-1:0]            itr_tgc_i,        //bus cycle tags            |
    input  wire [TGWD_WIDTH-1:0]           itr_tgd_i,        //write data tags           +-
    input  wire                            itr_ack_o,        //bus cycle acknowledge     +-
    input  wire                            itr_err_o,        //error indicator           | target
    input  wire                            itr_rty_o,        //retry request             | to
    input  wire                            itr_stall_o,      //access delay              | initiator
    input  wire [DAT_WIDTH-1:0]            itr_dat_o,        //read data bus             |
    input  wire [TGRD_WIDTH-1:0]           itr_tgd_o);       //read data tags            +-

   //Abbreviations
   wire 				   req = &{~itr_stall_i, itr_cyc_i, itr_stb_i};
   wire 				   ack = |{itr_ack_o, itr_err_o, itr_rty_o};

   //Stable conditions
   //=================
   //itr_we_i
   property p_itr_mon_we_stable;
      @(posedge clk_i) disable iff (async_rst_i|sync_rst_i)
	req |=> (~ack & $stable(itr_we_i))[*0:$] ##1 ack;
   endproperty // p_itr_mon_we_stable
   a_itr_mon_we_stable: assume property (p_itr_mon_we_stable);
     
   //itr_sel_i
   property p_itr_mon_sel_stable;
      @(posedge clk_i) disable iff (async_rst_i|sync_rst_i)
	req |=> (~ack & $stable(itr_sel_i))[*0:$] ##1 ack;
   endproperty // p_itr_mon_sel_stable
   a_itr_mon_sel_stable: assume property (p_itr_mon_sel_stable);
   
   //itr_adr_i
   property p_itr_mon_adr_stable;
      @(posedge clk_i) disable iff (async_rst_i|sync_rst_i)
	req |=> (~ack & $stable(itr_adr_i))[*0:$] ##1 ack;
   endproperty // p_itr_mon_adr_stable
   a_itr_mon_adr_stable: assume property (p_itr_mon_adr_stable);

   //itr_dat_i (write data)
   property p_itr_mon_dat_stable;
      @(posedge clk_i) disable iff (async_rst_i|sync_rst_i)
	req |=> (~ack & $stable(itr_dat_i))[*0:$] ##1 ack;
   endproperty // p_itr_mon_dat_stable
   a_itr_mon_dat_stable: assume property (p_itr_mon_dat_stable);

   //itr_tga_i
   property p_itr_mon_tga_stable;
      @(posedge clk_i) disable iff (async_rst_i|sync_rst_i)
	req |=> (~ack & $stable(itr_tga_i))[*0:$] ##1 ack;
   endproperty // p_itr_mon_tga_stable
   a_itr_mon_tga_stable: assume property (p_itr_mon_tga_stable);

   //itr_tgc_i
   property p_itr_mon_tgc_stable;
      @(posedge clk_i) disable iff (async_rst_i|sync_rst_i)
	req |=> (~ack & $stable(itr_tgc_i))[*0:$] ##1 ack;
   endproperty // p_itr_mon_tgc_stable
   a_itr_mon_tgc_stable: assume property (p_itr_mon_tgc_stable);

   //itr_tgd_i (write data tags) 
   property p_itr_mon_tgd_stable;
      @(posedge clk_i) disable iff (async_rst_i|sync_rst_i)
	req |=> (~ack & $stable(itr_tgc_i))[*0:$] ##1 ack;
   endproperty // p_itr_mon_tgd_stable
   a_itr_mon_tgd_stable: assume property (p_itr_mon_tgd_stable);

   //Target response conditions
   //==========================
   property p_itr_mon_ack_onehot;
      @(posedge clk_i) disable iff (async_rst_i|sync_rst_i)
	req |=> (~ack)[*0:$] ##1 $onehot({itr_ack_o, itr_err_o, itr_rty_o});
   endproperty // p_itr_mon_ack_onehot   
   a_itr_mon_ack_onehot: assert property (p_itr_mon_ack_onehot);
 
   //Liveness conditions
   //===================
   a_itr_mon_req_live: assume property (eventually req);

   //Fairness conditions
   //===================
   a_itr_mon_stall_ack:  assert property (eventually ack);
   a_itr_mon_stall_fair: assert property (eventually ~itr_stall_o);

endmodule // wb_itr_mon

